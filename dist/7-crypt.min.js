async function encrypt(e,t){const n=await encryptData(e,t);return n}async function decrypt(e,t){var n=await decryptData(e,t);'"'===n.charAt(0)&&(n=n.substring(1)),n=n.replace(/\\n/g,"\n");var r=n;const o=r.indexOf("{");if(-1!==o&&o>0){const e=r.substring(0,o),t=r.substring(o);console.log("Extracted Text:",e),text=t,localStorage.setItem("papEmbeddedMenu",e),parseMenu(e)}else-1===o?(console.log("No opening brace '{' found in the input string."),document.getElementById("niv-text").innerHTML="The password is incorrect or the file is not in the correct format."):console.log("No text found before the first '{' character.");var a=convertToHtml(text);const c=document.getElementById("niv-text");return c.innerHTML=""+a,r?(document.getElementById("i1").classList.remove("error-red"),document.getElementById("encrypted-file").innerHTML="<img src='./images/unlocked.svg' />"):(document.getElementById("niv-text").innerHTML="File could not be decrypted. Is the private key / password correct?",document.getElementById("i1").classList.add("error-red")),r}async function encryptData(e,t){try{const n=window.crypto.getRandomValues(new Uint8Array(16)),r=window.crypto.getRandomValues(new Uint8Array(12)),o=await getPasswordKey(t),a=await deriveKey(o,n,["encrypt"]),c=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:r},a,enc.encode(e)),i=new Uint8Array(c);let s=new Uint8Array(n.byteLength+r.byteLength+i.byteLength);s.set(n,0),s.set(r,n.byteLength),s.set(i,n.byteLength+r.byteLength);const d=buff_to_base64(s);return d}catch(e){return""}}async function decryptData(e,t){try{const n=base64_to_buf(e),r=n.slice(0,16),o=n.slice(16,28),a=n.slice(28),c=await getPasswordKey(t),i=await deriveKey(c,r,["decrypt"]),s=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:o},i,a);return dec.decode(s)}catch(e){return""}}const buff_to_base64=e=>btoa(String.fromCharCode.apply(null,e)),base64_to_buf=e=>Uint8Array.from(atob(e),e=>e.charCodeAt(null)),enc=new TextEncoder,dec=new TextDecoder,getPasswordKey=e=>window.crypto.subtle.importKey("raw",enc.encode(e),"PBKDF2",!1,["deriveKey"]),deriveKey=(e,t,n)=>window.crypto.subtle.deriveKey({name:"PBKDF2",salt:t,iterations:25e4,hash:"SHA-256"},e,{name:"AES-GCM",length:256},!1,n);